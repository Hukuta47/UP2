//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RepairTrack.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RepairTrackDBEntities : DbContext
    {
        public RepairTrackDBEntities()
            : base("name=RepairTrackDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<Device> Device { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<Issue> Issue { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Statuses> Statuses { get; set; }
        public virtual DbSet<TypeDevice> TypeDevice { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> CreateRepairRequest(Nullable<int> typeID, Nullable<int> issueTypeID, Nullable<int> clientID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var issueTypeIDParameter = issueTypeID.HasValue ?
                new ObjectParameter("IssueTypeID", issueTypeID) :
                new ObjectParameter("IssueTypeID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateRepairRequest", typeIDParameter, issueTypeIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<GetTechniciansWithRequestCount_Result> GetTechniciansWithRequestCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTechniciansWithRequestCount_Result>("GetTechniciansWithRequestCount");
        }
    }
}
